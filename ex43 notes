* Map
    - next_scene
    - opening_scene
    - current_scene
* Engine
    - play
    - next_scene
* Scene
    - enter
    - choice
    * Death
    * Central Corridor
    * Laser Weapon Armory
    * The Bridge
    * Escape Pod
    
Stanley Parable

Central Corridor -> Laser Weapon Armory -> The Bridge -> Escape Pod
        |                   |                   |           |
        Death                                   Death       Death
        
* Map object has the structure for the scenes. It has the information about which 
scenes there are and which room the player is currently in. It also has the 
information about which choice leads to which scene. 
    - self.current_scene keeps track of the current room the player is in
    - next_scene gets the scene and the result of the related choice. Based on that 
    it returns the scene to play next
    - opening_scene sets the atrribute to the scene parameter that is given when 
    the Map object is created
    - a scene has the following information: scene name, and the scenes that can 
    follow from this scene
    - the scenes are represented as a dictionary contaning a list. the key is the 
    scene shortname. the list consists of the scene name and the keys of the scenes 
    that can follow from this scene. The position of the following scenes in the 
    list and the results of the choices in the scenes should be linked.    

* Scene object contains the information about the scenes. It has the description
text and the choices that are used in a scene. It will get the result of the choice 
from the player and gives the result of a choice to the Engine object.
    - enter will show the description of the scene and will call choice.
    - choice will will present choices to the player, get the input and then return 
    the result to the Engine object.

* Engine object uses the Map object to look up which scene to play next. It takes 
the result from a Scene object and uses that with the Map object to decide which 
scene to play next.
    - play uses the Map object to get the scene that needs to be played. it then 
    calls the Scene object to be played. it recieves the result (choice) of the 
    scene aand uses that to get the next scene to be played.
    - when an Scene object returns 'end' the engine quits the program.
    - play uses a loop to go through the scenes. the loop ends when the scene 
    object returns None. 
    the loop start by calling scene.enter() if the result 
    is None, the loop is stopped. the result of scene.enter() is used to call 
    map.next_scene(). the result of map.next_scene() is used to call scene.enter()
    
* Laser Weapon Armory.
    The bomb cabinet is closed with a lock. To open the lock the player needs to 
    guess the four number combination. After a guess the player is told how many 
    numbers are correct. The player has a limited number of guesses (10?). If 
    the player is unable to guess the number the program displays the correct 
    combination. The player still has to enter the combination in the end.
    
    The combination has to be randomly generated when the player enters the 
    scene for the first time. The input of the player has to be checked against
    the combination to see how any numbers are correct. A number is correct
    when the value and the position are the same.
    
    The number combination is saved in a list. The player input has to be 
    converted to a list as well for comparison.
    
* Combat system.
    - monkey island insult combat
        - When in combat the player trades insults with the Gothon. Each insult 
        has one correct reply. If the player gets enough replies right the Gothon 
        gets dictracted enough to be killed off. If not the player gets killed.
        
        Each round the Gothon insults the player and the player has to choose out
        of a set of replies. When he gets the right or the wrong reply there will
        be an obvious response from the Gothon. 
        
        The player will have to try several times to learn the right combinations.
        
    - rock paper shotgun combat
        - Combat is played by the rock / paper / scissors rules. When one wins 
        a round one gets a hit. The first to score 3 hits wins the encounter.
        The three combat choices are shoot / duck / melee. Shoot wins from melee.
        Melee wins from duck. Duck wins from shoot.
        - At the start of a round the player chooses an action. The program 
        chooses an action at random for the Gothon. (Maybe the program analyses
        the chosen player actions to see if the player has a bias for one of the 
        actions. If so the program could then prefer the counter action as a result
        for the Gothon.) The result of the round is then shown to the player.
        - When the player wins he procedes to the next room. If not he dies.
        
* Combat(rock, paper, shotgun)
    Combat
    (rules)
    player / (Gothon)
    round / (encounter)
    (combat choice) / action
    (hits) / result
    next room
    
    play
    win
    choose
    score
    show
    procede
    

* Combat
    - play
    - procede
* Round
    - choose
* Result
    - show
    - score
* Player

* show_result.
    The result of the choices is shown in text. Taking into account the player 
    and the Gothon choices together with the result of those choices the correct
    running commentary of the combat is displayed. 
    The descriptions can be pretty basic. For variation specific descriptions 
    can be taken from the current Scene.
    The shown results consist of descriptions of the action of the player and of 
    the Gothon. And then shows a description of the result.
    
    (After a round, the result from that round leads into the choice descriptions
    the player can take. )
    Eventualy either the player or the Gothon will win the combat after a round.
    This should lead into a different description. One specific for the room it
    leads to next. This can be handeled by the Scene object after Combatround
    returned 'end_result'.
    The combat rules can lead to nine choice combinations.

duck - duck
shoot - shoot
melee - melee
duck - shoot
duck - melee
shoot - duck
shoot - melee
melee - duck
melee - shoot

    Three of which are functionally the same as in they have no effect on the 
    health of the player / gothon.
    Than there are three sets of the same combination where one action wins 
    from the other. The only difference is which one choose the winning 
    combination. 
    
* EscapePod
    The right pod is determined randomly from a total number of 5 pods. The Player
    has to choose the right one to get away. If the player has choosen a wrong pod 
    he will be told of two pods that are wrong not including the pod he has chosen.
    The player then gets to choose again. Now between three pods. 
    These three pods wil be the right pod, the pod the player has chosen and the 
    last wrong pod.
    
    The pods will be in a list(escape_pods). From this list the correct pod and the
    chosen pod can be taken. This will leave a list(wrong_escape_pods) from which
    the two wrong pods can be chosen. Finally there is the list(second_choice) with
    the three pods from which the player can choose a second time. 